spring.application.name=USERSERVICE
server.port=4010




# MySQL Configuration
spring.datasource.url=jdbc:mysql://localhost:3306/hotel_user_database
spring.datasource.username=root
spring.datasource.password=12345678
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

# JPA / Hibernate
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect


eureka.instance.prefer-ip-address=true
eureka.client.fetch-registry=true
eureka.client.register-with-eureka=true
eureka.client.service-url.defaultZone=http://localhost:8761/eureka/



# HikariCP settings
spring.datasource.hikari.maximum-pool-size=20
spring.datasource.hikari.minimum-idle=5
spring.datasource.hikari.idle-timeout=30000
spring.datasource.hikari.max-lifetime=1800000
spring.datasource.hikari.connection-timeout=30000
spring.datasource.hikari.pool-name=MyHikariCP


logging.level.com.zaxxer.hikari=DEBUG
management.endpoints.web.exposure.include=health,metrics



spring.data.redis.host=localhost
spring.data.redis.port=6379



# ========== CIRCUIT BREAKER CONFIGURATION ==========
# Name of the circuit breaker instance
resilience4j.circuitbreaker.instances.ratingServiceCB.registerHealthIndicator=true 
# ? Expose health indicator for this circuit breaker on /actuator/health

resilience4j.circuitbreaker.instances.ratingServiceCB.slidingWindowSize=20
# ? Number of calls in the sliding window to evaluate failure rate
# Example: 20 means it evaluates the last 20 calls.

resilience4j.circuitbreaker.instances.ratingServiceCB.permittedNumberOfCallsInHalfOpenState=5
# ? When in HALF-OPEN state, allow 5 test calls before deciding to close or open again

resilience4j.circuitbreaker.instances.ratingServiceCB.waitDurationInOpenState=15s
# ? After the breaker opens, wait 15 seconds before switching to HALF-OPEN to test again

resilience4j.circuitbreaker.instances.ratingServiceCB.failureRateThreshold=50
# ? % of failures (out of sliding window size) to trigger OPEN state
# Example: 50 means 50% failures out of last 20 calls

resilience4j.circuitbreaker.instances.ratingServiceCB.minimumNumberOfCalls=10
# ? Minimum calls before failure rate is calculated
# (to avoid opening on low-traffic situations with too few calls)

resilience4j.circuitbreaker.instances.ratingServiceCB.slowCallRateThreshold=50
# ? % of slow calls (longer than thresholdDuration) to trigger OPEN state
# Optional but useful if latency is an issue

resilience4j.circuitbreaker.instances.ratingServiceCB.slowCallDurationThreshold=2s
# ? Define what is considered a "slow" call
# Example: any call taking >2 seconds counts as slow

resilience4j.circuitbreaker.instances.ratingServiceCB.eventConsumerBufferSize=20
# ? How many events (state transitions) to keep in memory for monitoring

resilience4j.circuitbreaker.instances.ratingServiceCB.automaticTransitionFromOpenToHalfOpenEnabled=true
# ? Automatically switch from OPEN to HALF-OPEN after waitDurationInOpenState

# ========== OPTIONAL LOGGING ==========
logging.level.io.github.resilience4j.circuitbreaker=DEBUG
# ? Enable DEBUG logs for circuit breaker to see state transitions and metrics


resilience4j.bulkhead.instances.ratingServiceBH.maxConcurrentCalls=10
resilience4j.bulkhead.instances.ratingServiceBH.maxWaitDuration=2s




# ======== Rate Limiter Configuration ========
# Name must match the name in @RateLimiter
resilience4j.ratelimiter.instances.userServiceRateLimiter.limitForPeriod=5
# ? Max number of calls per refresh period

resilience4j.ratelimiter.instances.userServiceRateLimiter.limitRefreshPeriod=10s
# ? Refresh period duration (after this, calls counter resets)

resilience4j.ratelimiter.instances.userServiceRateLimiter.timeoutDuration=0
# ? How long to wait for permission when limit is reached (0 means fail fast)

resilience4j.ratelimiter.instances.userServiceRateLimiter.registerHealthIndicator=true
# ? Optional: expose rate limiter status in actuator